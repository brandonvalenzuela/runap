// Mocks generated by Mockito 5.4.5 from annotations
// in runap/test/features/map/controller/map_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:typed_data' as _i10;

import 'package:geolocator/geolocator.dart' as _i2;
import 'package:google_maps_flutter/google_maps_flutter.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:runap/features/map/models/workout_data.dart' as _i6;
import 'package:runap/features/map/models/workout_goal.dart' as _i9;
import 'package:runap/features/map/services/location_service.dart' as _i4;
import 'package:runap/features/map/services/map_workout_data_provider.dart'
    as _i8;
import 'package:runap/features/map/utils/location_permission_helper.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePosition_0 extends _i1.SmartFake implements _i2.Position {
  _FakePosition_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLatLngBounds_1 extends _i1.SmartFake implements _i3.LatLngBounds {
  _FakeLatLngBounds_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeScreenCoordinate_2 extends _i1.SmartFake
    implements _i3.ScreenCoordinate {
  _FakeScreenCoordinate_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLatLng_3 extends _i1.SmartFake implements _i3.LatLng {
  _FakeLatLng_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [LocationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationService extends _i1.Mock implements _i4.LocationService {
  MockLocationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  dynamic Function(_i3.LatLng) get onLocationUpdate =>
      (super.noSuchMethod(
            Invocation.getter(#onLocationUpdate),
            returnValue: (_i3.LatLng __p0) => null,
          )
          as dynamic Function(_i3.LatLng));

  @override
  dynamic Function(_i2.Position) get onMetricsUpdate =>
      (super.noSuchMethod(
            Invocation.getter(#onMetricsUpdate),
            returnValue: (_i2.Position __p0) => null,
          )
          as dynamic Function(_i2.Position));

  @override
  _i5.Future<_i2.Position> getCurrentPosition() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentPosition, []),
            returnValue: _i5.Future<_i2.Position>.value(
              _FakePosition_0(this, Invocation.method(#getCurrentPosition, [])),
            ),
          )
          as _i5.Future<_i2.Position>);

  @override
  void startLocationUpdates() => super.noSuchMethod(
    Invocation.method(#startLocationUpdates, []),
    returnValueForMissingStub: null,
  );

  @override
  void stopLocationUpdates() => super.noSuchMethod(
    Invocation.method(#stopLocationUpdates, []),
    returnValueForMissingStub: null,
  );

  @override
  void updateMetrics(_i6.WorkoutData? data, _i2.Position? currentPosition) =>
      super.noSuchMethod(
        Invocation.method(#updateMetrics, [data, currentPosition]),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [LocationPermissionHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationPermissionHelper extends _i1.Mock
    implements _i7.LocationPermissionHelper {
  MockLocationPermissionHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> checkLocationServiceEnabled() =>
      (super.noSuchMethod(
            Invocation.method(#checkLocationServiceEnabled, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<_i2.LocationPermission> checkLocationPermission() =>
      (super.noSuchMethod(
            Invocation.method(#checkLocationPermission, []),
            returnValue: _i5.Future<_i2.LocationPermission>.value(
              _i2.LocationPermission.denied,
            ),
          )
          as _i5.Future<_i2.LocationPermission>);

  @override
  _i5.Future<_i2.LocationPermission> requestLocationPermission() =>
      (super.noSuchMethod(
            Invocation.method(#requestLocationPermission, []),
            returnValue: _i5.Future<_i2.LocationPermission>.value(
              _i2.LocationPermission.denied,
            ),
          )
          as _i5.Future<_i2.LocationPermission>);

  @override
  _i5.Future<bool> isPermanentlyDenied() =>
      (super.noSuchMethod(
            Invocation.method(#isPermanentlyDenied, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  void openLocationSettings() => super.noSuchMethod(
    Invocation.method(#openLocationSettings, []),
    returnValueForMissingStub: null,
  );

  @override
  void openAppSettings() => super.noSuchMethod(
    Invocation.method(#openAppSettings, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [WorkoutDatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWorkoutDatabaseService extends _i1.Mock
    implements _i8.WorkoutDatabaseService {
  MockWorkoutDatabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i9.WorkoutGoal>> getAvailableWorkoutGoals() =>
      (super.noSuchMethod(
            Invocation.method(#getAvailableWorkoutGoals, []),
            returnValue: _i5.Future<List<_i9.WorkoutGoal>>.value(
              <_i9.WorkoutGoal>[],
            ),
          )
          as _i5.Future<List<_i9.WorkoutGoal>>);

  @override
  _i5.Future<_i9.WorkoutGoal?> getRecommendedWorkoutGoal() =>
      (super.noSuchMethod(
            Invocation.method(#getRecommendedWorkoutGoal, []),
            returnValue: _i5.Future<_i9.WorkoutGoal?>.value(),
          )
          as _i5.Future<_i9.WorkoutGoal?>);

  @override
  _i5.Future<void> saveWorkoutResult(
    double? distanceKm,
    int? durationSeconds,
    bool? goalCompleted,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#saveWorkoutResult, [
              distanceKm,
              durationSeconds,
              goalCompleted,
            ]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [GoogleMapController].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleMapController extends _i1.Mock
    implements _i3.GoogleMapController {
  MockGoogleMapController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get mapId =>
      (super.noSuchMethod(Invocation.getter(#mapId), returnValue: 0) as int);

  @override
  _i5.Future<void> clearTileCache(_i3.TileOverlayId? tileOverlayId) =>
      (super.noSuchMethod(
            Invocation.method(#clearTileCache, [tileOverlayId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> animateCamera(_i3.CameraUpdate? cameraUpdate) =>
      (super.noSuchMethod(
            Invocation.method(#animateCamera, [cameraUpdate]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> moveCamera(_i3.CameraUpdate? cameraUpdate) =>
      (super.noSuchMethod(
            Invocation.method(#moveCamera, [cameraUpdate]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> setMapStyle(String? mapStyle) =>
      (super.noSuchMethod(
            Invocation.method(#setMapStyle, [mapStyle]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<String?> getStyleError() =>
      (super.noSuchMethod(
            Invocation.method(#getStyleError, []),
            returnValue: _i5.Future<String?>.value(),
          )
          as _i5.Future<String?>);

  @override
  _i5.Future<_i3.LatLngBounds> getVisibleRegion() =>
      (super.noSuchMethod(
            Invocation.method(#getVisibleRegion, []),
            returnValue: _i5.Future<_i3.LatLngBounds>.value(
              _FakeLatLngBounds_1(
                this,
                Invocation.method(#getVisibleRegion, []),
              ),
            ),
          )
          as _i5.Future<_i3.LatLngBounds>);

  @override
  _i5.Future<_i3.ScreenCoordinate> getScreenCoordinate(_i3.LatLng? latLng) =>
      (super.noSuchMethod(
            Invocation.method(#getScreenCoordinate, [latLng]),
            returnValue: _i5.Future<_i3.ScreenCoordinate>.value(
              _FakeScreenCoordinate_2(
                this,
                Invocation.method(#getScreenCoordinate, [latLng]),
              ),
            ),
          )
          as _i5.Future<_i3.ScreenCoordinate>);

  @override
  _i5.Future<_i3.LatLng> getLatLng(_i3.ScreenCoordinate? screenCoordinate) =>
      (super.noSuchMethod(
            Invocation.method(#getLatLng, [screenCoordinate]),
            returnValue: _i5.Future<_i3.LatLng>.value(
              _FakeLatLng_3(
                this,
                Invocation.method(#getLatLng, [screenCoordinate]),
              ),
            ),
          )
          as _i5.Future<_i3.LatLng>);

  @override
  _i5.Future<void> showMarkerInfoWindow(_i3.MarkerId? markerId) =>
      (super.noSuchMethod(
            Invocation.method(#showMarkerInfoWindow, [markerId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> hideMarkerInfoWindow(_i3.MarkerId? markerId) =>
      (super.noSuchMethod(
            Invocation.method(#hideMarkerInfoWindow, [markerId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> isMarkerInfoWindowShown(_i3.MarkerId? markerId) =>
      (super.noSuchMethod(
            Invocation.method(#isMarkerInfoWindowShown, [markerId]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<double> getZoomLevel() =>
      (super.noSuchMethod(
            Invocation.method(#getZoomLevel, []),
            returnValue: _i5.Future<double>.value(0.0),
          )
          as _i5.Future<double>);

  @override
  _i5.Future<_i10.Uint8List?> takeSnapshot() =>
      (super.noSuchMethod(
            Invocation.method(#takeSnapshot, []),
            returnValue: _i5.Future<_i10.Uint8List?>.value(),
          )
          as _i5.Future<_i10.Uint8List?>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
